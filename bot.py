import asyncio
import logging
from pathlib import Path
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware, Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, TelegramObject, Update

from config import TOKEN
from handlers import common, courses, directions, earning_ways, start

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AntiSpamMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def __init__(self):
        super().__init__()
        self.spam_keywords = [
            'casino', 'bonus', 'jetacas', 'welcome1k',
            'deposit', 'promo code', 'online casino',
            'bet', 'gambling', 'poker', '$1000', 'claim',
            'withdraw', 'payout', 'betting', 'jackpot'
        ]
        self.blocked_users = set()

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, Update) and event.message:
            user_id = event.message.from_user.id
            username = event.message.from_user.username
            text = event.message.text or ""

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (@{username}): {text[:100]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
            if any(keyword.lower() in text.lower() for keyword in self.spam_keywords):
                logger.warning(f"üö® –°–ü–ê–ú –æ–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {text}")
                self.blocked_users.add(user_id)

                try:
                    await event.message.reply("‚ùå –°–ø–∞–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–ø–∞–º–∞: {e}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user_id in self.blocked_users:
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å")
                return

        return await handler(event, data)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º middleware
    dp.message.middleware(AntiSpamMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π - –í–ê–ñ–ï–ù –ü–û–†–Ø–î–û–ö!
    dp.include_router(directions.router)
    dp.include_router(courses.router)
    dp.include_router(earning_ways.router)
    dp.include_router(common.router)
    dp.include_router(start.router)  # catch-all –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ!

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("data").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)
    Path("images/main").mkdir(parents=True, exist_ok=True)
    Path("images/directions").mkdir(parents=True, exist_ok=True)
    Path("images/courses").mkdir(parents=True, exist_ok=True)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN[:10]}...{TOKEN[-10:]}")  # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
