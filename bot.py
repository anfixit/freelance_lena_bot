import asyncio
import logging
import json
from typing import Dict, Any
from pathlib import Path

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# States –¥–ª—è FSM
class UserStates(StatesGroup):
    choosing_profession = State()
    viewing_profession = State()
    viewing_courses = State()
    viewing_earning_ways = State()
    viewing_job_search = State()
    settings = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
def load_professions() -> list:
    try:
        with open('data/professions.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª professions.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ professions.json")
        return []

PROFESSIONS = load_professions()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üíº –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"), KeyboardButton(text="üìö –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã")],
            [KeyboardButton(text="üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
def get_professions_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for profession in PROFESSIONS:
        buttons.append([InlineKeyboardButton(
            text=f"{profession['emoji']} {profession['title']}",
            callback_data=f"prof_{profession['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
def get_profession_detail_keyboard(prof_id: str) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"courses_{prof_id}")],
        [InlineKeyboardButton(text="üí∞ –£—Ä–æ–≤–Ω–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞", callback_data=f"earning_{prof_id}")],
        [InlineKeyboardButton(text="üîç –ì–¥–µ –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"jobsearch_{prof_id}")],
        [InlineKeyboardButton(text="üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data=f"tools_{prof_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º", callback_data="professions")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ—Ä–∏–ª–∞–Ω—Å–∞!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ! "
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"
@router.message(F.text == "üíº –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π")
async def show_professions(message: Message, state: FSMContext):
    await state.set_state(UserStates.choosing_profession)
    await message.answer(
        "üíº <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
        reply_markup=get_professions_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
@router.callback_query(F.data.startswith("prof_"))
async def show_profession_detail(callback: CallbackQuery, state: FSMContext):
    prof_id = callback.data.split("_", 1)[1]
    profession = next((p for p in PROFESSIONS if p['id'] == prof_id), None)

    if not profession:
        await callback.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.set_state(UserStates.viewing_profession)
    await state.update_data(current_profession=prof_id)

    text = f"{profession['emoji']} <b>{profession['title']}</b>\n\n"
    text += f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {profession['description']}\n\n"
    text += f"üíµ <b>–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:</b> {profession['income']}\n\n"
    text += f"üéì <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏:</b> {profession['skills']}\n\n"
    text += f"üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b> {profession['start']}\n\n"
    text += f"üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b> {profession['resources']}"

    await callback.message.edit_text(
        text,
        reply_markup=get_profession_detail_keyboard(prof_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—É—Ä—Å–æ–≤
@router.callback_query(F.data.startswith("courses_"))
async def show_courses(callback: CallbackQuery, state: FSMContext):
    prof_id = callback.data.split("_", 1)[1]
    profession = next((p for p in PROFESSIONS if p['id'] == prof_id), None)

    if not profession:
        await callback.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    courses = profession.get('courses', {})

    text = f"üìö <b>–ö—É—Ä—Å—ã: {profession['title']}</b>\n\n"
    text += f"üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ:</b> {courses.get('free', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    text += f"üíé <b>–ü–ª–∞—Ç–Ω—ã–µ:</b> {courses.get('paid', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    text += f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {courses.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    text += f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {courses.get('result', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data=f"prof_{prof_id}")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
@router.callback_query(F.data.startswith("jobsearch_"))
async def show_job_search(callback: CallbackQuery, state: FSMContext):
    prof_id = callback.data.split("_", 1)[1]
    profession = next((p for p in PROFESSIONS if p['id'] == prof_id), None)

    if not profession:
        await callback.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    platforms = profession.get('platforms', [])

    text = f"üîç <b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã: {profession['title']}</b>\n\n"
    text += "<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n"

    for i, platform in enumerate(platforms, 1):
        text += f"{i}. {platform}\n"

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data=f"prof_{prof_id}")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
@router.message(F.text == "üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
async def show_earning_ways(message: Message):
    text = "üí∞ <b>–°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞</b>\n\n"
    text += "üöÄ <b>–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ (0-20,000 —Ä—É–±/–º–µ—Å):</b>\n"
    text += "‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥—É - 500-1000 —Ä—É–± –∑–∞ —Ç–µ–∫—Å—Ç\n"
    text += "‚Ä¢ –ë–∞–∑–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –∫–∞—Ä—Ç–æ—á–µ–∫ - 200-500 —Ä—É–± –∑–∞ –∫–∞—Ä—Ç–æ—á–∫—É\n"
    text += "‚Ä¢ –í–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π - 5,000-15,000 —Ä—É–±/–º–µ—Å\n"
    text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –±–æ—Ç–æ–≤ - 2,000-5,000 —Ä—É–± –∑–∞ –±–æ—Ç–∞\n\n"

    text += "üí™ <b>–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö (20,000-100,000 —Ä—É–±/–º–µ—Å):</b>\n"
    text += "‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ - 10,000-30,000 —Ä—É–±/–ø—Ä–æ–µ–∫—Ç\n"
    text += "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂ - 3,000-10,000 —Ä—É–±/–≤–∏–¥–µ–æ\n"
    text += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ - 20,000-50,000 —Ä—É–±/–º–µ—Å\n"
    text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - 15,000-40,000 —Ä—É–±/–ø—Ä–æ–µ–∫—Ç\n\n"

    text += "üî• <b>–î–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (100,000+ —Ä—É–±/–º–µ—Å):</b>\n"
    text += "‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã - 50,000-500,000 —Ä—É–±/–∑–∞–ø—É—Å–∫\n"
    text += "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ - 5,000-20,000 —Ä—É–±/—á–∞—Å\n"
    text += "‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –∫—Ä—É–ø–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏ - 100,000+ —Ä—É–±/–º–µ—Å\n"
    text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –±–µ–∑–ª–∏–º–∏—Ç"

    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã"
@router.message(F.text == "üìö –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã")
async def show_courses_menu(message: Message):
    text = "üìö <b>–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫—É—Ä—Å—ã –ø–æ –Ω–µ–π:"

    await message.answer(text, reply_markup=get_professions_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û –±–æ—Ç–µ"
@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def show_about(message: Message):
    text = "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
    text += "üéØ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ø—É—Ç—å –≤ –º–∏—Ä–µ —Ñ—Ä–∏–ª–∞–Ω—Å–∞ –∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
    text += "<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
    text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 10+ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–∞\n"
    text += "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –∏ –æ–±—É—á–µ–Ω–∏–∏\n"
    text += "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
    text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n"
    text += "‚Ä¢ –î–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞\n\n"
    text += "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @freelance_lena_support\n"
    text += "üìà <b>–í–µ—Ä—Å–∏—è:</b> 1.0"

    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º"
@router.callback_query(F.data == "professions")
async def back_to_professions(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.choosing_profession)
    await callback.message.edit_text(
        "üíº <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
        reply_markup=get_professions_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üéØ –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n"
        "üìä –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞\n"
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        "‚ö†Ô∏è <i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</i>"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")
async def show_job_search_menu(message: Message):
    text = "üîç <b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã:"

    await message.answer(text, reply_markup=get_professions_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
@router.callback_query(F.data.startswith("tools_"))
async def show_tools(callback: CallbackQuery):
    prof_id = callback.data.split("_", 1)[1]
    profession = next((p for p in PROFESSIONS if p['id'] == prof_id), None)

    if not profession:
        await callback.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    text = f"üõ† <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {profession['title']}</b>\n\n"

    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    tools_map = {
        "target_vk": "‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞\n‚Ä¢ Google Analytics\n‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞",
        "wb_ozon_design": "‚Ä¢ Adobe Photoshop\n‚Ä¢ Canva Pro\n‚Ä¢ Figma\n‚Ä¢ Adobe Illustrator\n‚Ä¢ Readymag",
        "video_montage": "‚Ä¢ Adobe Premiere Pro\n‚Ä¢ After Effects\n‚Ä¢ DaVinci Resolve\n‚Ä¢ Final Cut Pro\n‚Ä¢ Motion Graphics",
        "telegram_promo": "‚Ä¢ Telegram Analytics Bot\n‚Ä¢ TGStat\n‚Ä¢ Telemetr\n‚Ä¢ SMMplaner\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏",
        "smm_manager": "‚Ä¢ SMMplaner\n‚Ä¢ Hootsuite\n‚Ä¢ Buffer\n‚Ä¢ Canva\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        "china_buying": "‚Ä¢ 1688.com\n‚Ä¢ Alibaba\n‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ (Google, –Ø–Ω–¥–µ–∫—Å)\n‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
        "story_sales": "‚Ä¢ Instagram Creator Studio\n‚Ä¢ Stories Templates\n‚Ä¢ Canva\n‚Ä¢ Unfold\n‚Ä¢ StoryArt",
        "chatbot_specialist": "‚Ä¢ Manychat\n‚Ä¢ Botmother\n‚Ä¢ Chatfuel\n‚Ä¢ SendPulse\n‚Ä¢ Telegram Bot API",
        "copywriter": "‚Ä¢ Grammarly\n‚Ä¢ –ì–ª–∞–≤—Ä–µ–¥\n‚Ä¢ Advego Plagiatus\n‚Ä¢ SEO-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã\n‚Ä¢ Google Docs",
        "marketplace_manager": "‚Ä¢ –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã WB/OZON\n‚Ä¢ MPStats\n‚Ä¢ Wildberries Analytics\n‚Ä¢ SellerTools\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂"
    }

    text += tools_map.get(prof_id, "–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data=f"prof_{prof_id}")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–≤–Ω–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞
@router.callback_query(F.data.startswith("earning_"))
async def show_earning_levels(callback: CallbackQuery):
    prof_id = callback.data.split("_", 1)[1]
    profession = next((p for p in PROFESSIONS if p['id'] == prof_id), None)

    if not profession:
        await callback.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    text = f"üí∞ <b>–£—Ä–æ–≤–Ω–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {profession['title']}</b>\n\n"
    text += f"üìä <b>–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:</b> {profession['income']}\n\n"

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    earning_details = {
        "target_vk": "üöÄ –ù–æ–≤–∏—á–æ–∫: 15,000-25,000 —Ä—É–±/–º–µ—Å\nüí™ –û–ø—ã—Ç–Ω—ã–π: 25,000-40,000 —Ä—É–±/–º–µ—Å\nüî• –≠–∫—Å–ø–µ—Ä—Ç: 40,000+ —Ä—É–±/–º–µ—Å",
        "wb_ozon_design": "üöÄ –ù–æ–≤–∏—á–æ–∫: 20,000-35,000 —Ä—É–±/–º–µ—Å\nüí™ –û–ø—ã—Ç–Ω—ã–π: 35,000-60,000 —Ä—É–±/–º–µ—Å\nüî• –≠–∫—Å–ø–µ—Ä—Ç: 60,000+ —Ä—É–±/–º–µ—Å",
        "video_montage": "üöÄ –ù–æ–≤–∏—á–æ–∫: 25,000-45,000 —Ä—É–±/–º–µ—Å\nüí™ –û–ø—ã—Ç–Ω—ã–π: 45,000-80,000 —Ä—É–±/–º–µ—Å\nüî• –≠–∫—Å–ø–µ—Ä—Ç: 80,000+ —Ä—É–±/–º–µ—Å",
        "telegram_promo": "üöÄ –ù–æ–≤–∏—á–æ–∫: 18,000-30,000 —Ä—É–±/–º–µ—Å\nüí™ –û–ø—ã—Ç–Ω—ã–π: 30,000-50,000 —Ä—É–±/–º–µ—Å\nüî• –≠–∫—Å–ø–µ—Ä—Ç: 50,000+ —Ä—É–±/–º–µ—Å",
        "smm_manager": "üöÄ –ù–æ–≤–∏—á–æ–∫: 20,000-40,000 —Ä—É–±/–º–µ—Å\nüí™ –û–ø—ã—Ç–Ω—ã–π: 40,000-70,000 —Ä—É–±/–º–µ—Å\nüî• –≠–∫—Å–ø–µ—Ä—Ç: 70,000+ —Ä—É–±/–º–µ—Å"
    }

    text += earning_details.get(prof_id, "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data=f"prof_{prof_id}")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_message(message: Message):
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path("data").mkdir(exist_ok=True)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
